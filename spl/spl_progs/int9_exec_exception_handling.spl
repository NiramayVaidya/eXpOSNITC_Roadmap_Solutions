alias userSP R0;
userSP = SP;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;

SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 9;

alias physicalPageNum R1;
alias offset R2;
alias fileNamePhysicalAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4) / 512)];
offset = (userSP - 4) % 512;
fileNamePhysicalAddr = (physicalPageNum * 512) + offset;
alias fileName R4;
fileName = [fileNamePhysicalAddr];

alias fileInodeIndex R5;
alias fileFound R6;
fileFound = 0;
alias iter R7;
iter = 0;
while (iter < MAX_FILE_NUM) do
    if ([INODE_TABLE + iter * 16 + 1] == fileName) then
        if ([INODE_TABLE + iter * 16] == EXEC) then
            fileFound = 1;
            fileInodeIndex = iter;
            break;
        endif;
    endif;
    iter = iter + 1;
endwhile;

alias physicalAddrRetVal R8;
physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);

if (fileFound == 0) then
    [physicalAddrRetVal] = -1;
else
    multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8);
    R1 = EXIT_PROCESS;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    
    call PROCESS_MANAGER;
    
    multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8);
    
    alias userAreaPageNumber R9;
    userAreaPageNumber = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11];
    [MEMORY_FREE_LIST + userAreaPageNumber] = [MEMORY_FREE_LIST + userAreaPageNumber] + 1;
    
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
    
    SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
    
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = RUNNING;
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 7] = fileInodeIndex;
    
    iter = (userAreaPageNumber + 1) * PAGE_SIZE - 16;
    while (iter < ((userAreaPageNumber + 1) * PAGE_SIZE)) do
        [iter] = -1;
        iter = iter + 2;
    endwhile;
    
    PTBR = PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20;
    
    [PTBR] = 63;
    [PTBR + 1] = "0100";
    [PTBR + 2] = 64;
    [PTBR + 3] = "0100";

    alias returnedPageNumber R10;

    multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);
    R1 = GET_FREE_PAGE;
    
    call MEMORY_MANAGER;
    
    returnedPageNumber = R0;
    
    multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);
    
    [PTBR + 16] = returnedPageNumber;
    [PTBR + 17] = "0110";

    multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);
    R1 = GET_FREE_PAGE;
    
    call MEMORY_MANAGER;
    
    returnedPageNumber = R0;
    
    multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);
    
    [PTBR + 18] = returnedPageNumber;
    [PTBR + 19] = "0110";
    
    [PTBR + 4] = -1;
    [PTBR + 5] = "0000";
    [PTBR + 6] = -1;
    [PTBR + 7] = "0000";
    
    alias blockNum R11;
    blockNum = [INODE_TABLE + fileInodeIndex * 16 + 8];

    multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R11);
    R1 = GET_CODE_PAGE;
    R2 = blockNum;
    
    call MEMORY_MANAGER;
    
    returnedPageNumber = R0;
       
    multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R11);
    
    [PTBR + 8] = returnedPageNumber;
    [PTBR + 9] = "0100";
    [PTBR + 10] = -1;
    [PTBR + 11] = "0000";
    [PTBR + 12] = -1;
    [PTBR + 13] = "0000";
    [PTBR + 14] = -1;
    [PTBR + 15] = "0000";
    
    [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 2] = -1;
    [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 3] = -1;
    [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 8] = -1;
    [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 9] = -1;
    
    alias numBlocks R12;
    numBlocks = ([INODE_TABLE + fileInodeIndex * 16 + 2] / XFS_BSIZE) + 1;
    
    iter = 0;
    while (iter < numBlocks) do
        [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 4 + iter] = [INODE_TABLE + fileInodeIndex * 16 + 8 + iter];
        iter = iter + 1;
    endwhile;
    
    while (iter < numBlocks) do
        [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 4 + iter] = -1;
        iter = iter + 1;
    endwhile;
        
    [[PTBR + 16] * PAGE_SIZE] = [[PTBR + 8] * PAGE_SIZE + 1];
endif;

SP = 8 * PAGE_SIZE;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

ireturn;
