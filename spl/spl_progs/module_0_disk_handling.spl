alias functionNum R1;
alias currentPID R2;

if (functionNum == ACQUIRE_TERMINAL) then
	while ([TERMINAL_STATUS_TABLE] != ZERO) do
		[PROCESS_TABLE + currentPID * 16 + 4] = WAIT_TERMINAL;
		multipush(R1, R2);

		call SCHEDULER;
        
		multipop(R1, R2);
	endwhile;
	[TERMINAL_STATUS_TABLE] = ONE;
	[TERMINAL_STATUS_TABLE + 1] = currentPID;
endif;

if (functionNum == RELEASE_TERMINAL) then
	if (currentPID != [TERMINAL_STATUS_TABLE + 1]) then
		R0 = -1;
	else
		[TERMINAL_STATUS_TABLE] = ZERO;
		alias PID R3;
		PID = 0;
		while (PID < MAX_PROC_NUM) do
			if ([PROCESS_TABLE + PID * 16 + 4] == WAIT_TERMINAL) then
				[PROCESS_TABLE + PID * 16 + 4] = READY;
			endif;
			PID = PID + 1;
		endwhile;
		R0 = 0;
	endif;
endif;

if (functionNum == ACQUIRE_DISK) then
    while ([DISK_STATUS_TABLE] != ZERO) do
		[PROCESS_TABLE + currentPID * 16 + 4] = WAIT_DISK;
		multipush(R1, R2);

		call SCHEDULER;
        
		multipop(R1, R2);
	endwhile;
	[DISK_STATUS_TABLE] = ONE;
	[DISK_STATUS_TABLE + 1] = currentPID;
endif;

// breakpoint;

return;
